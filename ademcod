#!/usr/bin/perl -- # -*-Perl-*-

# MIT License
#
# Copyright (c) 2024 Greg Renda
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use IO::Socket;
use IO::Select;

use constant CLIENT_TIMEOUT	=> 60;
use constant PANEL		=> '/dev/ademco_panel';
use constant DEVICES		=> '/dev/ademco_devices';

my $port = shift;

die "usage: $0 <port>\n" unless $port;

open my $panel, '+<'.PANEL or die "$0: can't open ".PANEL.".\n";
select((select($panel), $| = 1)[0]);	# turn off buffering

my $udp = new IO::Socket::INET LocalPort=>$port, Proto=>'udp' or
    die "$0: can open udp port $port.\n";

my $sel = new IO::Select $panel, $udp;

my $devices;

if (-r DEVICES)
{
    open $devices, DEVICES or die "$0: can't open ".DEVICES.".\n";
    $sel->add($devices);
}

my (%clients, $devBuf);

while (1)
{
    for ($sel->can_read())
    {
	my $send;

	if ($_ eq $udp)
	{
	    $clients{$udp->recv(my $buf, 100)} = time;
	    print $panel pack('C', length($buf) + 1).$buf if length $buf > 1;
	    next;
	}
	elsif ($_ eq $panel)
	{
	    sysread $panel, my $buf, 100;
	    next unless length $buf;

	    my $type = unpack 'C', $buf;

	    {
		$type == 0xf7 && do
		{
		    $send = substr $buf, 0, 45 if
			length $buf >= 45 and !unpack '%8C45', $buf;
		    last;
		};

		$type == 0xf2 && do
		{
		    if (length $buf >= 2)
		    {
			my $n = unpack('xC', $buf) + 2;

			$send = substr $buf, 0, $n if
			    length $buf >= $n and !unpack "%8C$n", $buf;
		    }
		    last;
		};
	    }

	    $send = chr(0).$send if $send;
	}
	else
	{
	    sysread $devices, my $buf, 100;
	    $devBuf .= $buf;

	    while (length $devBuf >= 1)
	    {
		if ((unpack('C', $devBuf) & 0xf0) == 0x50)
		{
		    if (length $devBuf >= 6)
		    {
			if (unpack '%8C6', $devBuf)	# bad checksum
			{
			    substr($devBuf, 0, 1) = '';
			    next;
			}

			$send = chr(1).substr $devBuf, 0, 6;
			substr($devBuf, 0, 6) = '';
		    }

		    last;
		}

		substr($devBuf, 0, 1) = '';
	    }
	}

	if ($send)
	{
	    my $now = time;

	    for (keys %clients)
	    {
		if ($now - $clients{$_} >= CLIENT_TIMEOUT)
		{
		    delete $clients{$_};
		}
		else
		{
		    send $udp, $send, 0, $_;
		}
	    }
	}

    }
}
